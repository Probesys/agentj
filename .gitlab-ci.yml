---

# -*- coding: utf-8 -*-
image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_IMAGE_TAG: $CI_PIPELINE_ID
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

services:
  - docker:dind

cache:
  key: ${CI_COMMIT_REF_SLUG}

stages:
  - build
  - deploy

before_script:
  - |-
        if [ $CI_COMMIT_BRANCH == "master" ] ; then
            TAG="dev"
            REGISTRY=$CI_REGISTRY/$CI_PROJECT_PATH
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        elif [ $CI_COMMIT_BRANCH == "preprod" ] ; then
            TAG="preprod"
            REGISTRY=$CI_REGISTRY/$CI_PROJECT_PATH
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        elif [ $CI_COMMIT_BRANCH == "prod" ] ; then
            TAG=$CI_COMMIT_TAG
            REGISTRY=$REGISTRY/$CI_PROJECT_PATH
            docker login --username $HUB_USER -p $HUB_TOKEN
        else
            TAG=$CI_COMMIT_REF_NAME
            REGISTRY=$CI_REGISTRY/$CI_PROJECT_PATH
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        fi
        echo $TAG

app_build:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
  variables:
    IMG: app
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --target base
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:base .
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
    changes:
      - app/*
      - app/**/*

amavis_build:
  stage: build
  variables:
    IMG: amavis
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
      changes:
        - amavis/*
        - amavis/**/*

relay_build:
  stage: build
  variables:
    IMG: relay
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
    changes:
      - relay/*
      - relay/**/*

smtp_build:
  stage: build
  variables:
    IMG: smtp
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
    changes:
      - smtp/*
      - smtp/**/*

syslogng_build:
  stage: build
  variables:
    IMG: syslogng
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
    changes:
      - syslogng/*
      - syslogng/**/*

web_build:
  stage: build
  variables:
    IMG: web
  script:
    - cd $CI_PROJECT_DIR/$IMG && docker build
        --cache-from $REGISTRY/agentj_$IMG:$TAG
        --build-arg BUILDKIT_INLINE_CACHE=1
        -t $REGISTRY/agentj_$IMG:$TAG .
    - docker push $REGISTRY/agentj_$IMG:$TAG
  only:
    changes:
      - web/*
      - web/**/*

deploy-dev:
  stage: deploy
  cache: {}
  environment:
    name: dev
    url: https://agentj-$CI_ENVIRONMENT_SLUG.$DOMAIN
  variables:
    DEPLOY_USER: docker
    DEPLOY_DIR: "/home/$DEPLOY_USER/agentj-docker"
    TAG: "dev"
  before_script:
    - apk add --no-cache rsync
    - echo $TAG
    - REGISTRY="$CI_REGISTRY/$CI_PROJECT_PATH"
    - echo $REGISTRY
  script:
    - mkdir ~/.ssh && ssh-keyscan $DEPLOY_DEV >> ~/.ssh/known_hosts && chmod 700 ~/.ssh
    - echo "$SSH_CONFIG" > ~/.ssh/config && chmod 400 ~/.ssh/config
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - export DOCKER_HOST="ssh://${DEPLOY_USER:-$USER}@${DEPLOY_DEV:-$1}"
    - sed -i "s|probesys38|$REGISTRY|g" docker-compose.yml
    - sed -i "s|latest|$TAG|g" docker-compose.yml
    - echo $DEPLOY_DIR
    - ssh $DEPLOY_USER@$DEPLOY_DEV -C "[ ! -d $DEPLOY_DIR ] && mkdir -p $DEPLOY_DIR || true"
    - rsync -arv --exclude=".env" ./ $DEPLOY_USER@$DEPLOY_DEV:$DEPLOY_DIR/
    - ssh $DEPLOY_USER@$DEPLOY_DEV -C "cd $DEPLOY_DIR/ && docker-compose down"
    - docker image rm $(docker images -q --filter=reference="*/*/*/*agentj*") || true
    - docker volume rm agentj-docker_public || true
    - ssh $DEPLOY_USER@$DEPLOY_DEV -C "cd $DEPLOY_DIR/ && docker-compose up -d"
  except:
    - merge_requests
  only:
    - master

deploy-preprod:
  stage: deploy
  cache: {}
  environment:
    name: preprod
    url: https://agentj-$CI_ENVIRONMENT_SLUG.$DOMAIN
  variables:
    DEPLOY_USER: docker
    DEPLOY_DIR: "/home/$DEPLOY_USER/agentj-docker"
    TAG: "preprod"
  before_script:
    - apk add --no-cache rsync
    - echo $TAG 
    - REGISTRY="$CI_REGISTRY/$CI_PROJECT_PATH"
    - echo $REGISTRY
  script:
    - mkdir ~/.ssh && ssh-keyscan $DEPLOY_PREPROD >> ~/.ssh/known_hosts && chmod 700 ~/.ssh
    - echo "$SSH_CONFIG" > ~/.ssh/config && chmod 400 ~/.ssh/config
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - export DOCKER_HOST="ssh://${DEPLOY_USER:-$USER}@${DEPLOY_PREPROD:-$1}"
    - sed -i "s|probesys38|$REGISTRY|g" docker-compose.yml
    - sed -i "s|latest|$TAG|g" docker-compose.yml
    - echo $DEPLOY_DIR
    - ssh $DEPLOY_USER@$DEPLOY_PREPROD -C "[ ! -d $DEPLOY_DIR ] && mkdir -p $DEPLOY_DIR || true"
    - rsync -arv --exclude=".env" ./ $DEPLOY_USER@$DEPLOY_PREPROD:$DEPLOY_DIR/
    - ssh $DEPLOY_USER@$DEPLOY_PREPROD -C "cd $DEPLOY_DIR/ && docker-compose down"
    - docker image rm $(docker images -q --filter=reference="*/*/*/*agentj*") || true
    - docker volume rm agentj-docker_public || true
    - ssh $DEPLOY_USER@$DEPLOY_PREPROD -C "cd $DEPLOY_DIR/ && docker-compose up -d"
  except:
    - merge_requests
  only:
    - preprod
