use strict;

#
# Place your configuration directives here.  They will override those in
# earlier files.
#
# See /usr/share/doc/amavisd-new/ for documentation and examples of
# the directives you can use in this file
#
$MYHOME = "/var/amavis/";
$DO_SYSLOG = 1;
$myhostname = "agentj.example.com";
$log_level = 5;

# Runtime working directory (cwd), and a place where
# temporary directories for unpacking mail are created.
# (no trailing slash, may be a scratch file system)
# $TEMPBASE = $MYHOME;          # (must be set if other config vars use is)
$TEMPBASE = "$MYHOME/tmp";     # prefer to keep home dir /var/amavis clean?
$db_home = "$MYHOME/db";    # DB databases directory, default "$MYHOME/db"

# $helpers_home sets environment variable HOME, and is passed as option
# 'home_dir_for_helpers' to Mail::SpamAssassin::new. It should be a directory
# on a normal persistent file system, not a scratch or temporary file system
# $helpers_home = $MYHOME;  # (defaults to $MYHOME)
$helpers_home = "$MYHOME/var";

@lookup_sql_dsn =
  ( ['DBI:mysql:database=agentj;host=db;port=3306', 'u_agentj', 'changeme']);

@storage_sql_dsn = @lookup_sql_dsn;

# Apply policies by priority: user, group, domain
$sql_select_white_black_list =
  'SELECT wb'.
  ' FROM out_wblist JOIN mailaddr ON out_wblist.sid=mailaddr.id'.
  ' WHERE out_wblist.rid=? AND mailaddr.email IN (%k)'.
  ' ORDER BY out_wblist.priority DESC , mailaddr.priority DESC LIMIT 1';

$sql_select_policy =
  'SELECT *,users.id'.
  ' FROM users LEFT JOIN policy ON users.out_policy_id=policy.id'.
  ' WHERE users.email IN (%k) ORDER BY users.priority DESC';

# AgentJ conf: you must set up here one more server than in the 'feed' parameter of master.cf (needed for release)
$max_servers = 3;

# Default SPAM checking mode
@bypass_spam_checks_maps = (
   \%bypass_spam_checks, \@bypass_spam_checks_acl, \$bypass_spam_checks_re);
# Default antivirus checking mode
@bypass_virus_checks_maps = (
   \%bypass_virus_checks, \@bypass_virus_checks_acl, \$bypass_virus_checks_re);

$recipient_delimiter = '+';
$sa_spam_subject_tag = '***SPAM*** ';
$sa_tag_level_deflt  = 2;  # add spam info headers if at, or above that level
$sa_tag2_level_deflt = 6; # add 'spam detected' headers at that level
$sa_kill_level_deflt = 10; # triggers spam evasive actions
$sa_dsn_cutoff_level = 10;   # spam level beyond which a DSN is not sent
$sa_mail_body_size_limit = 200*1024; # don't waste time on SA if mail is larger
$sa_local_tests_only = 0;    # only tests which do not require internet access?

## Mail Forwarding
$forward_method = 'smtp:[172.24.42.230]:10025';
$requeue_method = 'smtp:[172.24.42.230]:10025';
$notify_method = 'smtp:[172.24.42.230]:10025';

## Quarantine settings
##
$QUARANTINEDIR = "$MYHOME/quarantine";
$virus_quarantine_method        = 'sql:virus-%i-%n';    # default
$spam_quarantine_method         = 'sql:spam-%b-%i-%n';  # default
$banned_files_quarantine_method = 'sql:banned-%i-%n';   # default
$bad_header_quarantine_method   = 'sql:badh-%i-%n';     # default
$clean_quarantine_method        = 'sql:clean-%i-%n';     # default 
$quarantine_subdir_levels = 1; # enable quarantine dir hashing
$final_virus_destiny = D_DISCARD;
$final_spam_destiny = D_DISCARD;
$final_banned_destiny = D_BOUNCE;
$final_bad_header_destiny = D_PASS;

## Logging
##
$log_recip_templ = undef;    # disable by-recipient level-0 log entries
$DO_SYSLOG = 1;              # log via syslogd (preferred)
$syslog_ident = 'amavis';    # syslog ident tag, prepended to all messages
$syslog_facility = 'mail';
$syslog_priority = 'debug';  # switch to info to drop debug output, etc

$enable_db = 1;              # enable use of BerkeleyDB/libdb (SNMP and nanny)
$enable_global_cache = 1;    # enable use of libdb-based cache if $enable_db=1

## Pid file location
$pid_file = "/var/run/amavis/amavisd.pid";

#
## Disable spam and virus notifications for the admin user.
## Can be overridden by the policies in mysql
##
@local_domains_maps= ( [".toto.fr"] );
$virus_admin = undef;
$spam_admin = undef;

@av_scanners = (
 ["ClamAV-clamd", 
  \&ask_daemon, ["CONTSCAN {}\n", "/run/clamav/clamd.ctl"],
  qr/\bOK$/m, qr/\bFOUND$/m, 
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],

 ["ClamAV-clamd", 
  \&ask_daemon, ["CONTSCAN {}\n", "/run/clamav/clamd.ctl"],
  qr/\bOK$/m, qr/\bFOUND$/m, 
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],

 ["ClamAV-clamd", 
  \&ask_daemon, ["CONTSCAN {}\n", "/run/clamav/clamd.ctl"],
  qr/\bOK$/m, qr/\bFOUND$/m, 
  qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],


);


# Do not store non-quarantined messages info
# You can set it to 1 (the default) to test if Amavis is filling correctly the tables maddr, msgs, and msgcrpt
$sql_store_info_for_all_msgs = 0;


$enable_dkim_verification = 1;
$enable_dkim_signing = 1; # load DKIM signing code
$signed_header_fields{'received'} = 0;  # turn off signing of Received
@dkim_signature_options_bysender_maps = (
{ '.' => { ttl => 21*24*3600, c => 'relaxed/simple' } } );


$inet_socket_port = [10024,9998];
$inet_socket_bind = undef;
$interface_policy{'10024'} = 'MYNET';
$policy_bank{'MYNET'} = {
     inet_acl => [qw(  [::1] 172.24.42.0/24)],
};
$interface_policy{'9998'} = 'AM.PDP-INET';
$policy_bank{'AM.PDP-INET'} = {
  protocol => 'AM.PDP',  # select Amavis policy delegation protocol
  inet_acl => [qw(  [::1] 127.0.0.1 172.24.42.0/24 )],  # restrict access to these IP addresses
  auth_required_release => 1,  # require secret_id for amavisd-release
 };

%sql_clause = (                          
  'sel_policy' => \$sql_select_policy,   
  'sel_wblist' => \$sql_select_white_black_list,
  'sel_adr' =>                           
    'SELECT id FROM maddr WHERE partition_tag=? AND email=?',
  'ins_adr' =>                           
    'INSERT INTO maddr (partition_tag, email, domain) VALUES (?,?,?)',
  'ins_msg' =>                           
    'INSERT INTO out_msgs (partition_tag, mail_id, secret_id, am_id,'.
    ' time_num, time_iso, sid, policy, client_addr, size, host,is_mlist)'.
    ' VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',   
  'upd_msg' =>                           
    'UPDATE out_msgs SET content=?, quar_type=?, quar_loc=?, dsn_sent=?,'.
    ' spam_level=?, message_id=?, from_addr=?, subject=?, client_addr=?,'.
    ' originating=?'.                    
    ' WHERE partition_tag=? AND mail_id=?',
  'ins_rcp' =>                           
    'INSERT INTO out_msgrcpt (partition_tag, mail_id, rseqnum, rid, is_local,'.
    ' content, ds, rs, bl, wl, bspam_level, smtp_resp)'.
    ' VALUES (?,?,?,?,?,?,?,?,?,?,?,?)', 
  'ins_quar' =>                          
    'INSERT INTO out_quarantine (partition_tag, mail_id, chunk_ind, mail_text)'.
    ' VALUES (?,?,?,?)',                 
  'sel_msg' =>  # obtains partition_tag  if missing in a release request
    'SELECT partition_tag FROM out_msgs WHERE mail_id=?',
  'sel_quar' =>                          
    'SELECT mail_text FROM out_quarantine'.
    ' WHERE partition_tag=? AND mail_id=?'.
    ' ORDER BY chunk_ind',               
  'sel_penpals' =>  # no message-id refe rences list
    "SELECT out_msgs.time_num, out_msgs.mail_id, subject".
    " FROM out_msgs JOIN out_msgrcpt USING (partition_tag,mail_id)".
    " WHERE sid=? AND rid=? AND out_msgs.content!='V' AND ds='P'".
    " ORDER BY out_msgs.time_num DESC",  # LIMIT 1
  'sel_penpals_msgid' =>  # with a nonempty list of message-id references
    "SELECT out_msgs.time_num, out_msgs.mail_id, subject, message_id, rid".
    " FROM out_msgs JOIN msgrcpt USING (partition_tag,mail_id)".
    " WHERE sid=? AND out_msgs.content!='V' AND ds='P' AND message_id IN (%m)".
      " AND rid!=sid".                   
    " ORDER BY rid=? DESC, out_msgs.time_num DESC",  # LIMIT 1
    'ins_out_wbl' => "INSERT",
    'sel_mailadr' => "SELECT id FROM mailaddr WHERE email=?",
    'ins_mailadr' => "INSERT INTO mailaddr (email, priority) VALUES (?,20)",

);



#------------ Do not modify anything below this line -------------
1;  # ensure a defined return
