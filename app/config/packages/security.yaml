security:
    # encoders:
    #     App\Entity\User: bcrypt  
    password_hashers:
        # use your user class name here
        App\Entity\User:
            # Use native password hasher, which auto-selects the best
            # possible hashing algorithm (starting from Symfony 5.3 this is "bcrypt")
            algorithm: bcrypt        
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # providers:
    #     #in_memory: { memory: ~ }
    #     database_users:
    #         entity: { class: App\Entity\User, property: username }
    enable_authenticator_manager: true
    providers:            
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    role_hierarchy:
        ROLE_USER: [ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: [ROLE_USER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN,ROLE_ALLOWED_TO_SWITCH]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        check:
            pattern: ^/check
            security:  false
        captcha:
            pattern: ^/captcha-handler
            security:  false
        main:
            lazy: true
#            provider: users_in_memory
            custom_authenticator: App\Security\LoginFormAuthenticator
#            entry_point: security_login
            logout:
                path: app_logout
            user_checker: App\Security\UserChecker    
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
                always_remember_me: true            
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH }
#            context: agentj

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/oAuthClient, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/admin, roles: [ROLE_ADMIN] }
         - { path: ^/policy/, roles: ROLE_SUPER_ADMIN }
         - { path: ^/domain, roles: ROLE_ADMIN }
         - { path: ^/, roles: ROLE_USER }
