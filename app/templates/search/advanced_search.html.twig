{% import 'macro/_sortLink.html.twig' as sortLinkMacro %}

{% extends 'base.html.twig' %}

{% block body %}
    <div class="m-4">
        <h3 class="mb-3">Recherche Avancée</h3>

        <button id="toggleFilters" class="btn btn-primary mb-3">
            Filtres
            <span id="toggleArrow" class="arrow-right"></span>
        </button>

        <div id="filterContainer" class="filtres mt-3 mb-5 col-md-12">
            {{ form_start(form) }}
            <div class="form-row">
                <div class="col-md-6">
                    {{ form_row(form.startDate) }}
                </div>
                <div class="col-md-6">
                    {{ form_row(form.endDate) }}
                </div>
            </div>

            <!-- From Address and Email -->
            <div class="form-row">
                <div class="col-md-6">
                    {{ form_row(form.fromAddr) }}
                </div>
                <div class="col-md-6">
                    {{ form_row(form.email) }}
                </div>
            </div>

            <!-- Subject and Mail ID -->
            <div class="form-row">
                <div class="col-md-6">
                    {{ form_row(form.subject) }}
                </div>
                <div class="col-md-6">
                    {{ form_row(form.mailId) }}
                </div>
            </div>

            <!-- Button to toggle advanced filters -->
            <button id="toggleAdvancedFilters" class="btn btn-secondary mb-4 mt-3">Filtres avancés</button>

            <!-- Advanced filters section -->
            <div id="advancedFilters" style="display: none;">
                {{ form_row(form.replyTo) }}
                <div class="form-group">
                    <label>Score Amavis</label>
                    <div class="d-flex">
                        {{ form_widget(form.bspamLevelMin, { 'attr': { 'placeholder': 'Min' } }) }}
                        {{ form_widget(form.bspamLevelMax, { 'attr': { 'placeholder': 'Max', 'class': 'ml-2' } }) }}
                    </div>
                </div>
                <div class="form-row">
                    <div class="col-md-6">
                        {{ form_row(form.size) }}
                    </div>
                    <div class="col-md-6">
                        {{ form_row(form.host) }}
                    </div>
                </div>

            </div>

            <div class="form-group">
                <label id="label_messagetype">{{ form_label(form.messageType) }}</label>
                <div class="toggle-button-group">
                    {% for choice in form.messageType %}
                        <div class="toggle-label">
                            {{ form_widget(choice, {'attr': {'class': 'toggle-input'}}) }}
                        </div>
                    {% endfor %}
                </div>
            </div>
            <div id="submit" class="mt-3">
                {{ form_widget(form.submit) }}
            </div>
            {{ form_end(form) }}
        </div>

        <table class="table table-hover search" style="margin: 3rem 0 5rem 0"
               data-active-filters="{{ activeFilters|json_encode }}">
            <thead>
            <tr class="table-header">
                <th><a href="#" class="sort-link" data-sort-field="mail_id">{{ 'Search.MailId'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="from_addr">{{ 'Search.Sender'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="email">{{ 'Search.Recipient'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="subject">{{ 'Search.Subject'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="time_iso">{{ 'Search.Date'|trans }}</a></th>
                <th class="amavis-header" style="display: none;"><a href="#" class="sort-link"
                                                                    data-sort-field="bspam_level">{{ 'Search.AmavisOutput'|trans }}
                </th>
                <th class="size-header" style="display: none;"><a href="#" class="sort-link"
                                                                  data-sort-field="size">{{ 'Search.Size'|trans }}</th>
                <th class="host-header" style="display: none;"><a href="#" class="sort-link"
                                                                  data-sort-field="host">{{ 'Search.Host'|trans }}</th>
                <th class="reply-to-header" style="display: none;"><a href="#" class="sort-link"
                                                                      data-sort-field="replyTo">{{ 'Search.ReplyTo'|trans }}
                </th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            {% include 'search/_messages.html.twig' with { 'msgs': msgs } %}
            </tbody>
        </table>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('turbo:load')
            const toggleButton = document.getElementById('toggleFilters');
            const filterContainer = document.getElementById('filterContainer');
            const toggleArrow = document.getElementById('toggleArrow');
            const toggleAdvancedButton = document.getElementById('toggleAdvancedFilters');
            const advancedFilters = document.getElementById('advancedFilters');

            // Toggle filter visibility
            toggleButton.addEventListener('click', function () {
                filterContainer.style.display = filterContainer.style.display === 'none' ? 'block' : 'none';
                toggleArrow.classList.toggle('arrow-down');
                toggleArrow.classList.toggle('arrow-right');
            });

            // Toggle advanced filters visibility
            toggleAdvancedButton.addEventListener('click', function (e) {
                e.preventDefault();
                advancedFilters.style.display = advancedFilters.style.display === 'none' ? 'block' : 'none';
            });

            function updateToggleButtons() {
                const inputs = document.querySelectorAll('.toggle-input');
                inputs.forEach(function (input) {
                    const toggleLabelDiv = input.closest('.toggle-label');
                    if (input.checked) {
                        toggleLabelDiv.classList.add('active');
                    } else {
                        toggleLabelDiv.classList.remove('active');
                    }
                });
            }

            // Initialize the buttons on page load
            updateToggleButtons();

            // Add event listeners to the inputs
            const inputs = document.querySelectorAll('.toggle-input');
            inputs.forEach(function (input) {
                input.addEventListener('change', function () {
                    updateToggleButtons();
                });
            });


            let dataTable = $('.search').DataTable({
                paging: true,
                searching: false,
                ordering: false,
                "language": {
                    url: $('body').data('base-path') + '/js/translations/datatable.' + $('html').attr('lang') + '.json'
                },
            });
            // Mapping of form fields to their corresponding table header classes
            const columnMapping = {
                'bspamLevelMin': '.amavis-header',
                'bspamLevelMax': '.amavis-header',
                'size': '.size-header',
                'host': '.host-header',
                'replyTo': '.reply-to-header',
            };

            // Handle form submission via Ajax
            $('form').on('submit', function (e) {
                e.preventDefault();

                var $form = $(this);
                var url = $form.attr('action');

                // Check for active advanced filters and update header visibility accordingly
                Object.keys(columnMapping).forEach(function (fieldName) {
                    const headerSelector = columnMapping[fieldName];
                    const fieldValue = $form.find(`[name="search_filter[${fieldName}]"]`).val();

                    // Toggle header visibility based on field value
                    if (fieldValue !== null && fieldValue !== '') {
                        document.querySelector(headerSelector).style.display = '';
                    } else {
                        document.querySelector(headerSelector).style.display = 'none';
                    }
                });

                // Send AJAX request to update the table
                $.ajax({
                    url: url,
                    method: $form.attr('method'),
                    data: $form.serialize(),
                    success: function (response) {
                        dataTable.destroy();
                        // Update the table body with new content
                        $('table.search tbody').html(response.content);
                        dataTable = $('.search').DataTable({
                            paging: true,
                            searching: false,
                            ordering: false,
                            "language": {
                                url: $('body').data('base-path') + '/js/translations/datatable.' + $('html').attr('lang') + '.json'
                            },
                        });
                    },
                    error: function () {
                        console.error('Error occurred while fetching data.');
                    }
                });
            });

            // Handle sort link clicks
            $('.sort-link').on('click', function (e) {
                e.preventDefault();

                var sortField = $(this).data('sort-field');
                var currentSortDirection = $(this).data('sort-direction') || 'asc';
                var newSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';

                // Update data attributes
                $(this).data('sort-direction', newSortDirection);

                var $form = $('form');
                var formData = $form.serializeArray();

                // Append sort parameters to form data
                formData.push({name: 'sortField', value: sortField});
                formData.push({name: 'sortDirection', value: newSortDirection});

                // Send AJAX request to update the table
                $.ajax({
                    url: $form.attr('action'),
                    method: $form.attr('method'),
                    data: $.param(formData),
                    success: function (response) {
                        // Update the table body with new content
                        $('table.search tbody').html(response.content);
                    },
                    error: function () {
                        console.error('Error occurred while fetching data.');
                    }
                });

            });
        });
    </script>

    <style>
        #toggleArrow {
            display: inline-block;
            margin-left: 10px;
            width: 0;
            height: 0;
            border-style: solid;
            border-width: 6px 4px 0 4px;
            border-color: #fff transparent transparent transparent;
            vertical-align: middle;
        }

        .arrow-right {
            transform: rotate(0deg);
        }

        .arrow-down {
            transform: rotate(270deg);
        }

        .switch-container {
            display: flex;
            align-items: center;
        }

        #search_filter_submit {
            font-size: 1.2rem;
        }

        .toggle-button-group {
            display: inline-flex;
            border-radius: 4px;
            overflow: hidden;
            border: 1px solid #ccc;
        }

        .toggle-label {
            margin: 0;
            padding: 0;
            cursor: pointer;
        }

        .toggle-label .form-check {
            margin: 0;
        }

        .toggle-label .form-check-label {
            padding: 10px 20px;
            background-color: #e0e0e0;
            color: #000;
            border-right: 1px solid #ccc;
            display: inline-block;
        }

        .toggle-label:last-child .form-check-label {
            border-right: none;
        }

        .toggle-label.active .form-check-label {
            background-color: #6de7da;
            color: #000000;
        }

        .form-check {
            padding: 0;
        }

        .form-check-label {
            cursor: pointer;
        }

        .form-check-input {
            display: none;
        }

        #label_messagetype {
            width: 100%;
        }

        #label_messagetype legend {
            width: 100%;
            font-size: 0.9rem;
        }

    </style>

{% endblock %}
