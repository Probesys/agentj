{% import 'macro/_sortLink.html.twig' as sortLinkMacro %}

{% extends 'base.html.twig' %}

{% block body %}
    <div class="m-3">
        <h3 class="mb-3">Recherche Avancée</h3>

        <button id="toggleFilters" class="btn btn-primary mb-3">
            Filtres
            <span id="toggleArrow" class="arrow-right"></span>
        </button>

        <div id="filterContainer" class="filtres mt-3 mb-3 col-md-8">
            {{ form_start(form) }}
            {{ form_row(form.startDate) }}
            {{ form_row(form.endDate) }}
            {{ form_row(form.fromAddr) }}
            {{ form_row(form.email) }}
            {{ form_row(form.subject) }}
            {{ form_row(form.mailId) }}

            <!-- Button to toggle advanced filters -->
            <button id="toggleAdvancedFilters" class="btn btn-secondary mb-3">Filtres avancés</button>

            <!-- Advanced filters section -->
            <div id="advancedFilters" style="display: none;">
                {{ form_row(form.replyTo) }}
                <div class="form-group">
                    <label>Score Amavis</label>
                    <div class="d-flex">
                        {{ form_widget(form.bspamLevelMin, { 'attr': { 'placeholder': 'Min' } }) }}
                        {{ form_widget(form.bspamLevelMax, { 'attr': { 'placeholder': 'Max', 'class': 'ml-2' } }) }}
                    </div>
                </div>
                {{ form_row(form.size) }}
                {{ form_row(form.host) }}
            </div>

            <div class="form-group switch-container">
                <label>{{ form_label(form.messageType) }}</label>
                <div class="switch-toggle">
                    {{ form_widget(form.messageType) }}
                </div>
            </div>

            {{ form_end(form) }}
        </div>

        <table class="table table-hover search" style="margin: 3rem 0 5rem 0"
               data-active-filters="{{ activeFilters|json_encode }}">
            <thead>
            <tr class="table-header">
                <th><a href="#" class="sort-link" data-sort-field="mail_id">{{ 'Search.MailId'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="from_addr">{{ 'Search.Sender'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="email">{{ 'Search.Recipient'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="subject">{{ 'Search.Subject'|trans }}</a></th>
                <th><a href="#" class="sort-link" data-sort-field="time_iso">{{ 'Search.Date'|trans }}</a></th>
                <th class="amavis-header" style="display: none;">{{ 'Search.AmavisOutput'|trans }}</th>
                <th class="size-header" style="display: none;">{{ 'Search.Size'|trans }}</th>
                <th class="host-header" style="display: none;">{{ 'Search.Host'|trans }}</th>
                <th class="reply-to-header" style="display: none;">{{ 'Search.ReplyTo'|trans }}</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            {% include 'search/_messages.html.twig' with { 'msgs': msgs } %}
            </tbody>
        </table>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const toggleButton = document.getElementById('toggleFilters');
                const filterContainer = document.getElementById('filterContainer');
                const toggleArrow = document.getElementById('toggleArrow');
                const toggleAdvancedButton = document.getElementById('toggleAdvancedFilters');
                const advancedFilters = document.getElementById('advancedFilters');

                // Toggle filter visibility
                toggleButton.addEventListener('click', function () {
                    filterContainer.style.display = filterContainer.style.display === 'none' ? 'block' : 'none';
                    toggleArrow.classList.toggle('arrow-down');
                    toggleArrow.classList.toggle('arrow-right');
                });

                // Toggle advanced filters visibility
                toggleAdvancedButton.addEventListener('click', function (e) {
                    e.preventDefault();
                    advancedFilters.style.display = advancedFilters.style.display === 'none' ? 'block' : 'none';
                });

                // Mapping of form fields to their corresponding table header classes
                const columnMapping = {
                    'bspamLevelMin': '.amavis-header',
                    'bspamLevelMax': '.amavis-header',
                    'size': '.size-header',
                    'host': '.host-header',
                    'replyTo': '.reply-to-header',
                };

                // Handle form submission via Ajax
                $('form').on('submit', function (e) {
                    e.preventDefault();

                    var $form = $(this);
                    var url = $form.attr('action');

                    // Check for active advanced filters and update header visibility accordingly
                    Object.keys(columnMapping).forEach(function (fieldName) {
                        const headerSelector = columnMapping[fieldName];
                        const fieldValue = $form.find(`[name="search_filter[${fieldName}]"]`).val();

                        // Toggle header visibility based on field value
                        if (fieldValue !== null && fieldValue !== '') {
                            document.querySelector(headerSelector).style.display = '';
                        } else {
                            document.querySelector(headerSelector).style.display = 'none';
                        }
                    });

                    // Send AJAX request to update the table
                    $.ajax({
                        url: url,
                        method: $form.attr('method'),
                        data: $form.serialize(),
                        success: function (response) {
                            // Update the table body with new content
                            $('table.search tbody').html(response.content);
                        },
                        error: function () {
                            console.error('Error occurred while fetching data.');
                        }
                    });
                });

                // Handle sort link clicks
                $('.sort-link').on('click', function (e) {
                    e.preventDefault();

                    var sortField = $(this).data('sort-field');
                    var currentSortDirection = $(this).data('sort-direction') || 'asc';
                    var newSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';

                    // Update data attributes
                    $(this).data('sort-direction', newSortDirection);

                    var $form = $('form');
                    var formData = $form.serializeArray();

                    // Append sort parameters to form data
                    formData.push({ name: 'sortField', value: sortField });
                    formData.push({ name: 'sortDirection', value: newSortDirection });

                    // Send AJAX request to update the table
                    $.ajax({
                        url: $form.attr('action'),
                        method: $form.attr('method'),
                        data: $.param(formData),
                        success: function (response) {
                            // Update the table body with new content
                            $('table.search tbody').html(response.content);
                        },
                        error: function () {
                            console.error('Error occurred while fetching data.');
                        }
                    });

                    // Optionally update the URL without reloading the page
                    var newUrl = advanced_search + '?' + $.param(formData);
                    history.pushState(null, '', newUrl);
                });
            });
        </script>

        <style>
            #toggleArrow {
                display: inline-block;
                margin-left: 10px;
                width: 0;
                height: 0;
                border-style: solid;
                border-width: 6px 4px 0 4px;
                border-color: #fff transparent transparent transparent;
                vertical-align: middle;
            }

            .arrow-right {
                transform: rotate(0deg);
            }

            .arrow-down {
                transform: rotate(270deg);
            }

            .switch-container {
                display: flex;
                align-items: center;
            }
        </style>

    </div>
{% endblock %}
